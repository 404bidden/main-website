generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RequestLog {
  id           String   @id @default(uuid())
  statusCode   Int?
  responseTime Int?
  isSuccess    Boolean
  createdAt    DateTime @default(now())
  routeId      String
  Route        Route    @relation(fields: [routeId], references: [id])
}

model Route {
  id                    String       @id @default(uuid())
  name                  String
  description           String?
  url                   String
  method                String
  requestHeaders        Json?
  requestBody           String?
  expectedStatusCode    Int?
  responseTimeThreshold Int?
  monitoringInterval    Int          @default(5)
  retries               Int?
  alertEmail            String?
  isActive              Boolean      @default(true)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @default(now()) @updatedAt
  userId                String
  RequestLog            RequestLog[]
  User                  User         @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean
  image         String?
  routes        Route[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}
